// Code generated by MockGen. DO NOT EDIT.
// Source: projectionist/provider (interfaces: IDBProvider)

// Package provider is a generated GoMock package.
package provider

import (
	gomock "github.com/golang/mock/gomock"
	models "projectionist/models"
	reflect "reflect"
)

// MockIDBProvider is a mock of IDBProvider interface
type MockIDBProvider struct {
	ctrl     *gomock.Controller
	recorder *MockIDBProviderMockRecorder
}

// MockIDBProviderMockRecorder is the mock recorder for MockIDBProvider
type MockIDBProviderMockRecorder struct {
	mock *MockIDBProvider
}

// NewMockIDBProvider creates a new mock instance
func NewMockIDBProvider(ctrl *gomock.Controller) *MockIDBProvider {
	mock := &MockIDBProvider{ctrl: ctrl}
	mock.recorder = &MockIDBProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDBProvider) EXPECT() *MockIDBProviderMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockIDBProvider) Count(arg0 models.Model) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockIDBProviderMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockIDBProvider)(nil).Count), arg0)
}

// Delete mocks base method
func (m *MockIDBProvider) Delete(arg0 models.Model, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockIDBProviderMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockIDBProvider)(nil).Delete), arg0, arg1)
}

// GetByID mocks base method
func (m *MockIDBProvider) GetByID(arg0 models.Model, arg1 int64) (models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockIDBProviderMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIDBProvider)(nil).GetByID), arg0, arg1)
}

// GetByName mocks base method
func (m *MockIDBProvider) GetByName(arg0 models.Model, arg1 string) (models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", arg0, arg1)
	ret0, _ := ret[0].(models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName
func (mr *MockIDBProviderMockRecorder) GetByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockIDBProvider)(nil).GetByName), arg0, arg1)
}

// IsExistByName mocks base method
func (m *MockIDBProvider) IsExistByName(arg0 models.Model) (error, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExistByName", arg0)
	ret0, _ := ret[0].(error)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsExistByName indicates an expected call of IsExistByName
func (mr *MockIDBProviderMockRecorder) IsExistByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExistByName", reflect.TypeOf((*MockIDBProvider)(nil).IsExistByName), arg0)
}

// Pagination mocks base method
func (m *MockIDBProvider) Pagination(arg0 models.Model, arg1, arg2 int) ([]models.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pagination", arg0, arg1, arg2)
	ret0, _ := ret[0].([]models.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pagination indicates an expected call of Pagination
func (mr *MockIDBProviderMockRecorder) Pagination(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pagination", reflect.TypeOf((*MockIDBProvider)(nil).Pagination), arg0, arg1, arg2)
}

// Save mocks base method
func (m *MockIDBProvider) Save(arg0 models.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockIDBProviderMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIDBProvider)(nil).Save), arg0)
}

// Update mocks base method
func (m *MockIDBProvider) Update(arg0 models.Model, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockIDBProviderMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIDBProvider)(nil).Update), arg0, arg1)
}
